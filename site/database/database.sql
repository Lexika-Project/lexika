CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;
CREATE EXTENSION IF NOT EXISTS pg_trgm;
-- CREATE EXTENSION IF NOT EXISTS postgis;

DROP TABLE IF EXISTS data CASCADE;
DROP TABLE IF EXISTS langue CASCADE;
DROP TABLE IF EXISTS livre CASCADE;
DROP TABLE IF EXISTS langue_dans_un_livre CASCADE;
DROP TABLE IF EXISTS version CASCADE;


CREATE TABLE livre(
    id_livre int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nom_livre text UNIQUE
);
CREATE TABLE langue(
    id_langue int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nom_langue text UNIQUE
);

CREATE TABLE langue_dans_un_livre(
    id_livre int REFERENCES livre(id_livre),
    id_langue int REFERENCES langue(id_langue),
    PRIMARY KEY(id_livre,id_langue)
);

CREATE TABLE data(
    id_data int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_langue int REFERENCES langue(id_langue),
    sens int,
    numero_page int,
    id_livre int,
    error int,
    audio_link text
    -- text_box geometry(POLYGON, 0)
);

CREATE TABLE version(
    id_version int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_data int,
    date_creation TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    traduction text
);

DROP VIEW IF EXISTS complete_table;
CREATE OR REPLACE VIEW complete_table AS (
    SELECT nom_langue,version.traduction,version.date_creation,data.sens,data.id_data,data.numero_page,data.audio_link,livre.nom_livre,version.id_version,data.error
        FROM ((langue JOIN data ON langue.id_langue = data.id_langue)JOIN livre ON data.id_livre = livre.id_livre) JOIN version ON data.id_data = version.id_data 
);


DROP VIEW IF EXISTS data_current ;
CREATE OR REPLACE VIEW data_current AS (
    SELECT * FROM complete_table
            WHERE id_version in (SELECT id_version FROM version JOIN 
                (SELECT id_data,max(date_creation) FROM version GROUP BY id_data) AS tmp ON 
                    version.id_data = tmp.id_data and version.date_creation = tmp.max)
)